---
title: "Sucrose Learning"
subtitle: "Cohort 3"
author: 
  - Sydney Cerveny
  - Roland Bock
date: 11/18/2024
code-fold: true
format: 
  html:
    number-sections: true
    code-fold: true
    fig-width: 8
    highlight-style: pygments
    theme: litera
---

```{r}
#| label: setup
#| include: false

#If archive isn't downloaded, write "install.packages('archive')" in your console
library(easypackages, archive)
packages("here")


source(here("R", "SucroseLearningSetup.R"))
source(here("R", "ICTablespecs.r"))
```

# Cohort Description


## Special considerations

This cohort started on October 29th, 2024 and the USA ended the daylight savings time on November 3rd, 2024. We need to ensure that our data aligns correctly after the time change.

## Animals

```{r}
#| label: data-loading-c3
#| code-fold: false
#| 
allArchives <- list.files(path = here("data/Archives/"), pattern = "\\.zip$", full.names = TRUE)
allExperiments <- list.files(path = here("data/Archives/"), pattern = "\\.zip$", full.names = TRUE)
allExperiments <- allExperiments[3:7]
print(allExperiments)

miceC3 <- read_tsv(archive::archive_read(archive = allExperiments[1], file = 'Animals.txt'), col_names = T, col_types = animal.col.spec)%>%
  select(-AnimalNotes) %>%
  rename("Animal" = AnimalName,
         "Tag" = AnimalTag,
         "Group" = GroupName)%>%
mutate(Session = 1)


if(length(allExperiments) > 1){
for(x in 2:length(allExperiments)){
  temp <- read_tsv(archive::archive_read(archive = allExperiments[x], file = 'Animals.txt'), col_names = T, col_types = animal.col.spec)%>%
    mutate(Session = x)%>%
  select(-AnimalNotes) %>%
  rename("Animal" = AnimalName,
         "Tag" = AnimalTag,
         "Group" = GroupName)
  miceC3 <- rbind(miceC3, temp)
}
}
  #Old code
mice_C3 <- read_tsv(here("data/C3/SL", "Animal.txt"), col_names = T,
                    col_types = mouse.col.spec)
```


```{r}
#| label: tbl-dataset-size
#| tbl-cap: "Distribution of sexes and genotypes within cohort 3."
#| tbl-cap-location: margin

miceC3 %>%
  count(Group, Sex) %>%
  pivot_wider(names_from = Sex, values_from = n) %>%
  rowwise() %>%
  mutate(total = sum(Female, Male, na.rm = T)) %>% 
  gt(rowname_col = "Group") %>% 
  tab_header(title = "Mouse Count", 
             subtitle = "Cohort 3") %>% 
  sub_missing() %>% 
  grand_summary_rows(columns = (Female:total),
                     fns = list(
                       total ~ sum(., na.rm = T)
                     )) %>% 
  gt_highlight_cols(columns = total,
                    fill = "lightgray") %>% 
  tab_style(
    locations = cells_grand_summary(),
    style = cell_fill(color = "gray")
  )

```

```{r}
#| code-fold: false

visitsc3 <- read_tsv(archive::archive_read(archive = allExperiments[1], file = 'IntelliCage/Visits.txt'), col_names = T, col_types = visitZip.col.spec) %>%
  mutate(VisitStartDate = as.Date(Start), #Making Start and End more readable
     	VisitStartTime = as_hms(Start),
     	VisitEndDate = as.Date(End),
     	VisitEndTime = as_hms(End)) %>%
mutate(Session = 1)

#Set the initial BooleanReportersC3
BooleanReportersC3 <- read_tsv(archive::archive_read(archive = allExperiments[1], file = 'IntelliCage/BooleanReporters.txt'), col_names = T, col_types = RewardFlag.col.spec) %>%
  mutate(Session = 1)

NosePokesc3 <- read_tsv(archive::archive_read(archive = allExperiments[1], file = 'IntelliCage/Nosepokes.txt'), col_names = T, col_types = Nosepoke.col.spec) %>% mutate(Session = 1)

if(length(allExperiments) > 1){
for(x in 2:length(allExperiments)){
  tempVisit <- read_tsv(archive::archive_read(archive = allExperiments[x], file = 'IntelliCage/Visits.txt'), col_names = T, col_types = visitZip.col.spec)%>%
  mutate(VisitStartDate = as.Date(Start), #Making Start and End more readable
     	VisitStartTime = as_hms(Start),
     	VisitEndDate = as.Date(End),
     	VisitEndTime = as_hms(End),
     	Session = x
     	)
  visitsc3 <- rbind(visitsc3, tempVisit)
 
  #Making NosePokes file
  tempNP <- read_tsv(archive::archive_read(archive = allExperiments[x], file = 'IntelliCage/Nosepokes.txt'), col_names = T, col_types = Nosepoke.col.spec) %>%     mutate(Session = x)
  NosePokesc3 <- rbind(NosePokesc3, tempNP)
 
  # Making Boolean Reporters file
  tempBR <- read_tsv(archive::archive_read(archive = allExperiments[x], file = 'IntelliCage/BooleanReporters.txt'), col_names = T, col_types = RewardFlag.col.spec) %>% 
        mutate(Session = x)
  BooleanReportersC3 <- rbind(BooleanReportersC3, tempBR)
  
  }
}
miceC3 <- miceC3 %>% 
  rename("AnimalTag" = Tag)
  miceC3$Session <- NULL

  visitsc3 <- left_join(visitsc3, BooleanReportersC3, by=c("Session", "VisitID")) %>% 
  mutate(VisitType = case_when(
                    FR == TRUE & Reward == TRUE & LickNumber > 0 ~ "Rewarded", #If the mouse got a reward
                    FR == TRUE & Reward == TRUE & LickNumber == 0 ~ "Unwanted", #If the reward was gotten but not claimed
                    FR == TRUE & Reward == FALSE & LickNumber == 0 ~ "Unrewarded", #Reward was not given
                    FR == FALSE & Reward == FALSE & LickNumber == 0 ~ "Explorer", #FR and Reward were not given
                    FR == TRUE & Reward == FALSE & LickNumber > 0 ~ "Incorrect_R",
                    FR == FALSE & Reward == FALSE & LickNumber > 0 ~ "Incorrect_RFR",
                    .default = "Error!"
                    ),
                    VisitType = as.factor(VisitType),
  )
  
UniqueVisits <- visitsc3
visitsc3 <- left_join(visitsc3, NosePokesc3, by=c("Session","VisitID"))
visitsc3 <- left_join(visitsc3, miceC3, by="AnimalTag")

 
#Cleaning out NA with default values
visitsc3$Side[is.na(visitsc3$Side)] <- 0 #Default side is 0
visitsc3$SideCondition[is.na(visitsc3$SideCondition)] <- 0 #Default SideCondition is 0
visitsc3$SideError[is.na(visitsc3$SideError)] <- 0 #Default SideError is 0
visitsc3$ConditionError[is.na(visitsc3$ConditionError)] <- 0 #Default ConditionError is 0
visitsc3$TimeError[is.na(visitsc3$TimeError)] <- 0 #Default TimeError is 0

#Default for all of these is 0
visitsc3$AirState[is.na(visitsc3$AirState)] <- 0
visitsc3$DoorState[is.na(visitsc3$DoorState)] <- 0
visitsc3$LED1State[is.na(visitsc3$LED1State)] <- 0
visitsc3$LED2State[is.na(visitsc3$LED2State)] <- 0
visitsc3$LED3State[is.na(visitsc3$LED3State)] <- 0

```


```{r}

# ExperimentsDay1 = filter(uniqueVisits, ExperimentDay == 1)
visitsc3 <- visitsc3 %>% 
  mutate(Fluid = if_else(Corner %in% c(2,4), "Water", "Sucrose"),
         Probability = if_else(Corner %in% c(1,2), 
          case_when( #If mouse has visited corner 1 or 2
           (ymd("2024/10/29") <= Start.x) & (Start.x < ymd("2024/11/4")) ~ "Risky",
           (ymd("2024/11/4") <= Start.x) & (Start.x < ymd("2024/11/8")) ~ "Safe",
           (ymd("2024/11/8") <= Start.x) & (Start.x < ymd("2024/11/12")) ~ "Risky",
           (ymd("2024/11/12") <= Start.x) & (Start.x < ymd("2024/11/18")) ~ "Safe",
           (ymd("2024/11/18") <= Start.x) & (Start.x < ymd("2024/11/23")) ~ "Risky"
                   ),
         case_when(
           (ymd("2024/10/29") <= Start.x) & (Start.x) < ymd("2024/11/4") ~ "Safe",
           (ymd("2024/11/4") <= Start.x) & (Start.x < ymd("2024/11/8")) ~ "Risky",
           (ymd("2024/11/8") <= Start.x) & (Start.x < ymd("2024/11/12")) ~ "Safe",
           (ymd("2024/11/12") <= Start.x) & (Start.x < ymd("2024/11/18")) ~ "Risky",
           (ymd("2024/11/18") <= Start.x) & (Start.x < ymd("2024/11/23")) ~ "Safe"
                  )
              ), #End of if_else
         ExperimentDay = as.numeric(ceiling(difftime(Start.x, ymd("2024/10/29"), units = "days"))),
  )

UniqueVisits <- UniqueVisits %>% 
  mutate(Fluid = if_else(Corner %in% c(2,4), "Water", "Sucrose"),
                  Probability = if_else(Corner %in% c(1,2), 
          case_when( #If mouse has visited corner 1 or 2
           (ymd("2024/10/29") <= Start) & (Start < ymd("2024/11/4")) ~ "Risky",
           (ymd("2024/11/4") <= Start) & (Start < ymd("2024/11/8")) ~ "Safe",
           (ymd("2024/11/8") <= Start) & (Start < ymd("2024/11/12")) ~ "Risky",
           (ymd("2024/11/12") <= Start) & (Start < ymd("2024/11/18")) ~ "Safe",
           (ymd("2024/11/18") <= Start) & (Start < ymd("2024/11/23")) ~ "Risky"
                   ),
         case_when(
           (ymd("2024/10/29") <= Start) & (Start) < ymd("2024/11/4") ~ "Safe",
           (ymd("2024/11/4") <= Start) & (Start < ymd("2024/11/8")) ~ "Risky",
           (ymd("2024/11/8") <= Start) & (Start < ymd("2024/11/12")) ~ "Safe",
           (ymd("2024/11/12") <= Start) & (Start < ymd("2024/11/18")) ~ "Risky",
           (ymd("2024/11/18") <= Start) & (Start < ymd("2024/11/23")) ~ "Safe"
                  )
              ), #End of if_else
         ExperimentDay = as.numeric(ceiling(difftime(Start, ymd("2024/10/29"), units = "days"))),
         )

VisitAvg <- data.frame(Visits = c(), Day = c())
AllAnimals <- data.frame(AnimalTag = unique(visitsc3$AnimalTag), Visits = rep(c(0), each = length(unique(visitsc3$AnimalTag))))

UniqueVisits %>%
  group_by(Session, AnimalTag) %>%
  summarise(start = min(as.Date(Start)),
        	end = max(as.Date(Start)),
        	visits = n(),
        	licks = sum(LickNumber),
        	RiskyVisits = sum(Probability == "Risky"),
        	Water = sum(Fluid == "Water"),
        	Rewarded = sum(VisitType == "Rewarded"),
        	Unwanted = sum(VisitType == "Unwanted"),
        	Unrewarded = sum(VisitType == "Unrewarded"),
        	Explorer = sum(VisitType == "Explorer"),
        	IncorrectRewards = sum(VisitType == "Incorrect_R"),
        	IncorrectRewardFR = sum(VisitType == "Incorrect_RFR"),
          UniqueDays = n_distinct(ExperimentDay)
        	) %>%
  gt() %>%
  tab_header(title = "Counts for the dataset, All Mice") %>%
    tab_caption("Initial overview of the dataset for cohort 3.")

UniqueVisits %>%
  group_by(AnimalTag) %>%
  filter(sum(VisitType == "Rewarded") < 10) %>% #Only showing mice who appear to have an issue with the amount of rewarded visits counted
  summarise(visits = n(),
        	licks = sum(LickNumber),
        	RiskyVisits = sum(Probability == "Risky"),
        	Rewarded = sum(VisitType == "Rewarded"),
        	Unwanted = sum(VisitType == "Unwanted"),
        	Unrewarded = sum(VisitType == "Unrewarded"),
        	Explorer = sum(VisitType == "Explorer"),
        	) %>%
  gt() %>%
  tab_header(title = "Problematic Mice :(") %>%
    tab_caption("Initial overview of the dataset for cohort 3.")


```

```{r}
visitsc3 %>%
  group_by(AnimalTag, ExperimentDay, VisitType, Probability) %>% 
  filter(VisitType != "Incorrect_R" & VisitType != "Incorrect_RFR") %>% 
  summarize(visits = n_distinct(Session, VisitID),
            licks = sum(LickNumber.y),
            .groups = "keep") %>% 
      ggplot(aes(x = ExperimentDay, y = visits, fill = VisitType, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "darkgray") +
  geom_point(shape = 21, size = 2, color = "black") +

  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  dbGroupColorScale +
  labs(title = "Risk Preference and Visit Type",
       y = "Visits/Day") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ VisitType) #This decides what variables are displayed on the axis boxes


```


```{r}
visitsc3 %>%
  
  group_by(AnimalTag, ExperimentDay, Probability, Fluid) %>% 
  
  filter(VisitType != "Incorrect_R" & VisitType != "Incorrect_RFR") %>% 
  
  summarize(visits = n_distinct(Session, VisitID),
            licks = sum(LickNumber.y),
            .groups = "keep") %>% 
  
      ggplot(aes(x = ExperimentDay, y = visits, fill = Fluid, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "darkgray") +
  geom_point(shape = 21, size = 2, color = "black") +
  geom_vline(xintercept = c(6.5, 10.5, 14.5, 20.5), color = "gray", linetype = "dashed") +

  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  dbGroupColorScale +
  labs(title = "Visits Per Day of Each Solution",
       y = "Visits/Day", caption = "Dashed lines indicate days the position of each solution was swapped") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ Fluid) #This decides what variables are displayed on the axis boxes

```

```{r}
visitsc3 %>%
  
  group_by(AnimalTag, ExperimentDay, Probability, Fluid) %>% 
  
  filter(VisitType != "Incorrect_R" & VisitType != "Incorrect_RFR") %>% 
  
  summarize(visits = n_distinct(Session, VisitID),
            licks = sum(LickNumber.y, na.rm = TRUE),
            .groups = "keep") %>% 
  
      ggplot(aes(x = ExperimentDay, y = licks, fill = Fluid, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "darkgray") +
  geom_point(shape = 21, size = 2, color = "black") +
  geom_vline(xintercept = c(6.5, 10.5, 14.5, 20.5), color = "gray", linetype = "dashed") +
  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  dbGroupColorScale +
  labs(title = "Licks Per Day of Each Solution",
       y = "Licks/Day", caption = "Dashed lines indicate days the position of each solution was swapped") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ Fluid) #This decides what variables are displayed on the axis boxes
```



```{r}

UniqueVisits %>% 
  group_by(ExperimentDay) %>%
  summarise(Visits = n_distinct(Session, VisitID),
            Sucrose = sum(Fluid == "Sucrose"),
            Water = sum(Fluid == "Water"),
            Risky = sum(Probability == "Risky"),
            Safe = sum(Probability == "Safe")
            ) %>% 
  gt()


```


```{r}
#Please note Mouse #992000001823391 has a drinking problem
visitsc3 %>%
  
  group_by(AnimalTag, ExperimentDay, Corner, Sex) %>% 
  
  filter(VisitType != "Incorrect_R" & VisitType != "Incorrect_RFR") %>% 
  
  summarize(visits = n_distinct(Session, VisitID),
            licks = sum(LickNumber.y, na.rm = TRUE),
            .groups = "keep") %>% 
  
      ggplot(aes(x = ExperimentDay, y = visits, fill = Corner, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "darkgray") +
  geom_point(shape = 21, size = 2, color = "black") +
  geom_vline(xintercept = c(6.5, 10.5, 14.5, 20.5), color = "gray", linetype = "dashed") +
  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  
  dbGroupColorScale +
  labs(title = "Visits Per Day of Each Corner",
       y = "Visits/Day", caption = "Dashed lines indicate days the position of each solution was swapped") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  
  #This decides what variables are displayed on the axis boxes
  facet_grid(Sex ~ Corner, labeller = labeller(.cols = c('1' = "Corner 1", '2' = "Corner 2", '3' = "Corner 3", '4' = "Corner 4"), 
                                                 ) ) #.rows = c('1' = "Cage 1", '2' = "Cage 2")

```