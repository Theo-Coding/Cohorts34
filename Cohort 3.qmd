---
title: "Sucrose Learning"
subtitle: "Cohort 3"
author: 
  - Sydney Cerveny
  - Roland Bock
date: 11/18/2024
code-fold: true
format: 
  html:
    number-sections: true
    code-fold: true
    fig-width: 8
    highlight-style: pygments
    theme: litera
---

```{r}
#| label: setup
#| include: false

#If archive isn't downloaded, write "install.packages('archive')" in your console
library(easypackages, archive)
packages("here")


source(here("R", "SucroseLearningSetup.R"))
source(here("R", "ICTablespecs.r"))
```

# Cohort Description


## Special considerations

This cohort started on October 29th, 2024 and the USA ended the daylight savings time on November 3rd, 2024. We need to ensure that our data aligns correctly after the time change.

## Animals

```{r}
#| label: data-loading-c3
#| code-fold: false
#| 
allArchives <- list.files(path = here("data/Archives/"), pattern = "\\.zip$", full.names = TRUE)
allExperiments <- list.files(path = here("data/Archives/"), pattern = "\\.zip$", full.names = TRUE)
allExperiments <- allExperiments[3:7]
print(allExperiments)

miceC3 <- read_tsv(archive::archive_read(archive = allExperiments[1], file = 'Animals.txt'), col_names = T, col_types = animal.col.spec)%>%
  select(-AnimalNotes) %>%
  rename("Animal" = AnimalName,
         "Tag" = AnimalTag,
         "Group" = GroupName)%>%
mutate(Session = 1)


if(length(allExperiments) > 1){
for(x in 2:length(allExperiments)){
  temp <- read_tsv(archive::archive_read(archive = allExperiments[x], file = 'Animals.txt'), col_names = T, col_types = animal.col.spec)%>%
    mutate(Session = x)%>%
  select(-AnimalNotes) %>%
  rename("Animal" = AnimalName,
         "Tag" = AnimalTag,
         "Group" = GroupName)
  miceC3 <- rbind(miceC3, temp)
}
}
  #Old code
mice_C3 <- read_tsv(here("data/C3/SL", "Animal.txt"), col_names = T,
                    col_types = mouse.col.spec)
```


```{r}
#| label: tbl-dataset-size
#| tbl-cap: "Distribution of sexes and genotypes within cohort 3."
#| tbl-cap-location: margin

miceC3 %>%
  count(Group, Sex) %>%
  pivot_wider(names_from = Sex, values_from = n) %>%
  rowwise() %>%
  mutate(total = sum(Female, Male, na.rm = T)) %>% 
  gt(rowname_col = "Group") %>% 
  tab_header(title = "Mouse Count", 
             subtitle = "Cohort 3") %>% 
  sub_missing() %>% 
  grand_summary_rows(columns = (Female:total),
                     fns = list(
                       total ~ sum(., na.rm = T)
                     )) %>% 
  gt_highlight_cols(columns = total,
                    fill = "lightgray") %>% 
  tab_style(
    locations = cells_grand_summary(),
    style = cell_fill(color = "gray")
  )

```

```{r}
#| code-fold: false

visitsc3 <- read_tsv(archive::archive_read(archive = allExperiments[1], file = 'IntelliCage/Visits.txt'), col_names = T, col_types = visitZip.col.spec) %>%
  mutate(VisitStartDate = as.Date(Start), #Making Start and End more readable
     	VisitStartTime = as_hms(Start),
     	VisitEndDate = as.Date(End),
     	VisitEndTime = as_hms(End)) %>%
mutate(Session = 1)

#Set the initial BooleanReportersC3
BooleanReportersC3 <- read_tsv(archive::archive_read(archive = allExperiments[1], file = 'IntelliCage/BooleanReporters.txt'), col_names = T, col_types = RewardFlag.col.spec) %>%
  mutate(Session = 1)

NosePokesc3 <- read_tsv(archive::archive_read(archive = allExperiments[1], file = 'IntelliCage/Nosepokes.txt'), col_names = T, col_types = Nosepoke.col.spec) %>% mutate(Session = 1)

if(length(allExperiments) > 1){
for(x in 2:length(allExperiments)){
  tempVisit <- read_tsv(archive::archive_read(archive = allExperiments[x], file = 'IntelliCage/Visits.txt'), col_names = T, col_types = visitZip.col.spec)%>%
  mutate(VisitStartDate = as.Date(Start), #Making Start and End more readable
     	VisitStartTime = as_hms(Start),
     	VisitEndDate = as.Date(End),
     	VisitEndTime = as_hms(End),
     	Session = x
     	)
  visitsc3 <- rbind(visitsc3, tempVisit)
 
  #Making NosePokes file
  tempNP <- read_tsv(archive::archive_read(archive = allExperiments[x], file = 'IntelliCage/Nosepokes.txt'), col_names = T, col_types = Nosepoke.col.spec) %>%     mutate(Session = x)
  NosePokesc3 <- rbind(NosePokesc3, tempNP)
 
  # Making Boolean Reporters file
  tempBR <- read_tsv(archive::archive_read(archive = allExperiments[x], file = 'IntelliCage/BooleanReporters.txt'), col_names = T, col_types = RewardFlag.col.spec) %>% 
        mutate(Session = x)
  BooleanReportersC3 <- rbind(BooleanReportersC3, tempBR)
  
  }
}
visitsc3 %>%
	select(-Start, -End) %>% #Removing Start and End
  rename("Tag" = AnimalTag,
     	"Module" = ModuleName,
     	)
  visitsc3 <- left_join(visitsc3, BooleanReportersC3, by=c("Session", "VisitID")) %>% 
  mutate(VisitType = case_when(
                    FR == TRUE & Reward == TRUE & LickNumber > 0 ~ "Rewarded", #If the mouse got a reward
                    FR == TRUE & Reward == TRUE & LickNumber == 0 ~ "Unwanted", #If the reward was gotten but not claimed
                    FR == TRUE & Reward == FALSE & LickNumber == 0 ~ "Unrewarded", #Reward was not given
                    FR == FALSE & Reward == FALSE & LickNumber == 0 ~ "Explorer", #FR and Reward were not given
                    FR == TRUE & Reward == FALSE & LickNumber > 0 ~ "Incorrect_R",
                    FR == FALSE & Reward == FALSE & LickNumber > 0 ~ "Incorrect_RFR",
                    .default = "Error!"
                    ),
                    VisitType = as.factor(VisitType),
                    
  )
  NosePokesc3%>%
visitsc3 <- left_join(visitsc3, NosePokesc3, by=c("Session","VisitID"))

 
#Cleaning out NA with default values
visitsc3$Side[is.na(visitsc3$Side)] <- 0 #Default side is 0
visitsc3$SideCondition[is.na(visitsc3$SideCondition)] <- 0 #Default SideCondition is 0
visitsc3$SideError[is.na(visitsc3$SideError)] <- 0 #Default SideError is 0
visitsc3$ConditionError[is.na(visitsc3$ConditionError)] <- 0 #Default ConditionError is 0
visitsc3$TimeError[is.na(visitsc3$TimeError)] <- 0 #Default TimeError is 0

#Default lick number, contact time, and duration are all set to the defaults from visits file
# visitsc3$LickNumber.y[is.na(visitsc3$LickNumber.y)] <- visitsc3$LickNumber.x
# visitsc3$LickContactTime.y[is.na(visitsc3$LickContactTime.y)] <- visitsc3$LickContactTime.x
# visitsc3$LickDuration.y[is.na(visitsc3$LickDuration.y)] <- visitsc3$LickDuration.x


#visitsc3$Start[is.na(visitsc3$Start)] <- ymd_hms(paste(as.character(visitsc3$VisitStartDate), as.character(visitsc3$VisitStartTime))) #Default start for licks is the start of the visit and
#visitsc3$End[is.na(visitsc3$End)] <- ymd_hms(paste(as.character(visitsc3$VisitEndDate), as.character(visitsc3$VisitEndTime)))
#Default End for the licks is end of the visit

#Default for all of these is 0
visitsc3$AirState[is.na(visitsc3$AirState)] <- 0
visitsc3$DoorState[is.na(visitsc3$DoorState)] <- 0
visitsc3$LED1State[is.na(visitsc3$LED1State)] <- 0
visitsc3$LED2State[is.na(visitsc3$LED2State)] <- 0
visitsc3$LED3State[is.na(visitsc3$LED3State)] <- 0

```
```{r}
visitsc3 <- visitsc3 %>% 
  mutate(Fluid = if_else(Corner %in% c(2,4), "Water", "Sucrose"),
         Probability = if_else(
                     ((Corner %in% c(3,4) & ((ymd("2024/10/29") <= Start.x) & (Start.x) <= ymd("2024/11/3"))) |
                     (Corner %in% c(1,2) & ((ymd("2024/11/4") <= Start.x) & (Start.x) <= ymd("2024/11/7")))  |
                     (Corner %in% c(3,4) & ((ymd("2024/11/8") <= Start.x) & (Start.x) <= ymd("2024/11/11"))) |
                     (Corner %in% c(1,2) & ((ymd("2024/11/12") <= Start.x) & (Start.x) <= ymd("2024/11/17")))|
                     (Corner %in% c(3,4) & ((ymd("2024/11/18") <= Start.x) & (Start.x) <= ymd("2024/11/21"))))
                     , "Safe", "Risky"))


visitsc3%>%
  group_by(Session) %>%
  summarise(start = min(as.Date(Start.x)),
        	end = max(as.Date(Start.x)),
        	visits = n_distinct(VisitID),
        #	Pokes = sum(LickDuration > 0),
        	licks = sum(LickNumber.x),
        	RiskyVisits = sum(Probability == "Risky"),
        	Water = sum(Fluid == "Water"),
        	Rewarded = round(sum(VisitType == "Rewarded") * n_distinct(VisitID)/n(), 0), #There is probably a better way to do this, but this works
        	Unwanted = round(sum(VisitType == "Unwanted") * n_distinct(VisitID)/n(), 0), #Kind of...
        	Unrewarded = round(sum(VisitType == "Unrewarded") * n_distinct(VisitID)/n(), 0),
        	Explorer = round(sum(VisitType == "Explorer") * n_distinct(VisitID)/n(), 0),
        	IncorrectRewards = round(sum(VisitType == "Incorrect_R") * n_distinct(VisitID)/n(), 0),
        	IncorrectRewardFR = round(sum(VisitType == "Incorrect_RFR") * n_distinct(VisitID)/n(), 0),
        	) %>%
  gt() %>%
  tab_header(title = "Counts for the dataset") %>%
    tab_caption("Initial overview of the dataset for cohort 3.")


 glimpse(visitsc3)

```

```{r}
dotchart()



```