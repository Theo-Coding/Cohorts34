---
title: "Sucrose Learning"
subtitle: "Cohort 3"
author: 
  - Sydney Cerveny
  - Roland Bock
date: 11/18/2024
code-fold: true
format: 
  html:
    number-sections: true
    code-fold: true
    fig-width: 8
    highlight-style: pygments
    theme: litera
---

```{r}
#| label: setup
#| include: false

#If archive isn't downloaded, write "install.packages('archive')" in your console
library(easypackages)
packages("here", "archive", "patchwork", "writexl")


source(here("R", "SucroseLearningSetup.R"))
source(here("R", "ICTablespecs.r"))
```

# Cohort Description


## Special considerations

This cohort started on October 29th, 2024 and the USA ended the daylight savings time on November 3rd, 2024. We need to ensure that our data aligns correctly after the time change.

## Animals

```{r}
#| label: data-loading-c3
#| code-fold: false

allArchivesc3 <- list.files(path = here("data/ArchiveC3/"), pattern = "\\.zip$", full.names = TRUE) #Imports all files from the archives folder
allArchivesc4 <- list.files(path = here("data/ArchiveC4/"), pattern = "\\.zip$", full.names = TRUE) #Imports all files from the archives folder

allExperimentsC3 <- allArchivesc3[3:7] 
allExperimentsC4 <- allArchivesc4[] #ADD STUFF HERE
#3:7 are the archives I am using in this code, taken from all the archive folders

micec3 <- read_tsv(archive::archive_read(archive = allExperimentsC3[1], file = 'Animals.txt'), col_names = T, col_types = animal.col.spec) #Importing the Animals.txt from the first folder in allExperimentsC3

if(length(allExperimentsC3) > 1){
for(x in 2:length(allExperimentsC3)){
  MiceTemp <- read_tsv(archive::archive_read(archive = allExperimentsC3[x], file = 'Animals.txt'), col_names = T, col_types = animal.col.spec) #Adding all other experiments, them binding them to main micec3 object
  micec3 <- rbind(micec3, MiceTemp)
}
}

for(x in x:length(allExperimentsC4)){
  MiceTemp <- read_tsv(archive::archive_read(archive = allExperimentsC4[x], file = 'Animals.txt'), col_names = T, col_types = animal.col.spec) #Adding all other experiments, them binding them to main micec3 object
  micec3 <- rbind(micec3, MiceTemp)
}
micec3 <- unique(micec3) %>%  #Getting rid of AnimalNotes, changing AnimalName and GroupName to be same in all data structures.
  filter(AnimalTag != "992000001819774") %>% 
  select(-AnimalNotes) %>%
  rename("Animal" = AnimalName,
         "Group" = GroupName
         )
  
```


```{r}
#| label: tbl-dataset-size
#| tbl-cap: "Distribution of sexes and genotypes within cohort 3."
#| tbl-cap-location: margin


micec3 %>%
  count(Group, Sex) %>% #
  pivot_wider(names_from = Sex, values_from = n) %>%
  rowwise() %>%
  mutate(total = sum(Female, Male, na.rm = T)) %>% 
  gt(rowname_col = "Group") %>% 
  tab_header(title = "Mouse Count", 
             subtitle = "Cohort 3") %>% 
  sub_missing() %>% 
  grand_summary_rows(columns = (Female:total),
                     fns = list(
                       total ~ sum(., na.rm = T)
                     )) %>% 
  gt_highlight_cols(columns = total,
                    fill = "lightgray") %>% 
  tab_style(
    locations = cells_grand_summary(),
    style = cell_fill(color = "gray")
  )

```

## Data Loading

```{r}
#| code-fold: true


#Importing first visitsc3
visitsc3 <- read_tsv(archive::archive_read(archive = allExperimentsC3[1], file = 'IntelliCage/Visits.txt'), col_names = T, col_types = visitZip.col.spec) %>%
  mutate(Session = 1) #Adding the session for first experiments.

#Importing first booleanreporters
booleanreportersc3 <- read_tsv(archive::archive_read(archive = allExperimentsC3[1], file = 'IntelliCage/BooleanReporters.txt'), col_names = T, col_types = RewardFlag.col.spec) %>%
  mutate(Session = 1)

#Importing first nosepokes
nosepokesc3 <- read_tsv(archive::archive_read(archive = allExperimentsC3[1], file = 'IntelliCage/Nosepokes.txt'), col_names = T, col_types = Nosepoke.col.spec) %>% mutate(Session = 1)

if(length(allExperimentsC3) > 1){ #Only run loop if there are more than 1 experiments
for(x in 2:length(allExperimentsC3)){ #Iterate through all experiments, grab their nosepokes, visits, and booleanreporter files
  tempVisit <- read_tsv(archive::archive_read(archive = allExperimentsC3[x], file = 'IntelliCage/Visits.txt'), col_names = T, col_types = visitZip.col.spec)%>%
  mutate(Session = x)
  visitsc3 <- rbind(visitsc3, tempVisit)
 
  #Making NosePokes file
  tempNP <- read_tsv(archive::archive_read(archive = allExperimentsC3[x], file = 'IntelliCage/Nosepokes.txt'), col_names = T, col_types = Nosepoke.col.spec) %>%     
    mutate(Session = x)
  nosepokesc3 <- rbind(nosepokesc3, tempNP)
 
  # Making Boolean Reporters file
  tempBR <- read_tsv(archive::archive_read(archive = allExperimentsC3[x], file = 'IntelliCage/BooleanReporters.txt'), col_names = T, col_types = RewardFlag.col.spec) %>% 
        mutate(Session = x)
  booleanreportersc3 <- rbind(booleanreportersc3, tempBR)
  
  }
}
  #Adding the data from micec3 to visitsc3 so all visits have mouse group, sex, etc
  visitsc3 <- left_join(visitsc3, micec3, by="AnimalTag")
  #Adding all booleanreporters, which allows us to determine the type of each visit (Rewarded, Unrewarded, Unwanted, Explorer)
  visitsc3 <- left_join(visitsc3, booleanreportersc3, by=c("Session", "VisitID")) %>% 
  mutate(Fluid = if_else(Corner %in% c(2,4), "Water", "Sucrose"), #Adds fluid
         Probability = if_else(Corner %in% c(1,2),  #Adds risky/safe, accounting for date and corner
          case_when( #If mouse has visited corner 1 or 2
           (Session == 1) ~ "Risky",
           (Session == 2) ~ "Safe",
           (Session == 3) ~ "Risky",
           (Session == 4) ~ "Safe",
           (Session == 5) ~ "Risky"
                   ),
         case_when( #Mouse visited 3 or 4
           (Session == 1) ~ "Safe",
           (Session == 2) ~ "Risky",
           (Session == 3) ~ "Safe",
           (Session == 4) ~ "Risky",
           (Session == 5) ~ "Safe"
                  )
              ),
         VisitType = case_when(
                    FR == TRUE & Reward == TRUE & LickNumber > 0 ~ "Rewarded", #If the mouse got a reward
                    FR == TRUE & Reward == TRUE & LickNumber == 0 ~ "Unwanted", #If the reward was gotten but not claimed
                    FR == TRUE & Reward == FALSE & LickNumber == 0 ~ "Unrewarded", #Reward was not given
                    FR == FALSE & Reward == FALSE & LickNumber == 0 ~ "Explorer", #FR and Reward were not given
                    .default = "Error!"
                    ), 
         Group = factor(Group, levels = c("control", "auto HET", "iMSN HET", "double HET")), #Making group a factor for later
         VisitType = factor(VisitType, levels = c("Rewarded", "Unrewarded", "Unwanted", "Explorer", "Error!")), #Ordering visit type for graphs later
         Fluid = factor(Fluid, levels = c("Sucrose", "Water")), #Ordering liquids for (you will never guess what) graphs later
         VisitStartDate = as.Date(Start),
     	VisitStartTime = as_hms(Start),
     	VisitEndDate = as.Date(End),
     	VisitEndTime = as_hms(End),
      ExperimentDay = as.numeric(ceiling(difftime(Start, ymd("2024/10/29"), units = "days"))),
  )



UniqueVisits <- visitsc3 %>% 
    filter(AnimalTag != "992000001819774")
#Copying all of the visits to UniqueVisits, this will make every visit only 1 row in the data, 
#as opposed to after nosepokes is added, where each visit is split into its nose pokes as well

visitsc3 <- left_join(visitsc3, nosepokesc3, by=c("Session","VisitID")) %>% 
  filter(AnimalTag != "992000001819774")

 
#Cleaning out NA with default values
is.na(visitsc3$Side) <- 0 #Default side is 0
is.na(visitsc3$SideCondition) <- 0 #Default SideCondition is 0
is.na(visitsc3$SideError) <- 0 #Default SideError is 0
is.na(visitsc3$ConditionError) <- 0 #Default ConditionError is 0
is.na(visitsc3$TimeError) <- 0 #Default TimeError is 0

#Default for all of these is 0
is.na(visitsc3$AirState) <- 0
is.na(visitsc3$DoorState) <- 0
is.na(visitsc3$LED1State) <- 0
is.na(visitsc3$LED2State) <- 0
is.na(visitsc3$LED3State) <- 0

```
### Creating data labels

```{r}
#| code-fold: true
# ExperimentsDay1 = filter(uniqueVisits, ExperimentDay == 1)

UniqueVisits %>%
  group_by(AnimalTag) %>%
  summarise(start = min(as.Date(Start)),
        	end = max(as.Date(Start)),
        	visits = n(),
        	licks = sum(LickNumber),
        	RiskyVisits = sum(Probability == "Risky"),
        	Water = sum(Fluid == "Water"),
        	Rewarded = sum(VisitType == "Rewarded"),
        	Unwanted = sum(VisitType == "Unwanted"),
        	Unrewarded = sum(VisitType == "Unrewarded"),
        	Explorer = sum(VisitType == "Explorer"),
        	IncorrectRewards = sum(VisitType == "Error!"),
          UniqueDays = n_distinct(ExperimentDay), 
          .groups = "keep"
        	) %>%
  gt() %>%
  tab_header(title = "Counts for the dataset, All Mice") %>%
    tab_caption("Count of visit types for all mice.")

UniqueVisits %>%
  group_by(AnimalTag) %>%
  filter(sum(VisitType == "Rewarded") < 10) %>% #Only showing mice who appear to have an issue with the amount of rewarded visits counted
  summarise(visits = n(),
        	licks = sum(LickNumber),
        	Rewarded = sum(VisitType == "Rewarded"),
        	RiskyVisits = sum(Probability == "Risky"), 
            .groups = "keep"
        	) %>%
  gt() %>%
  tab_header(title = "Error mice") %>%
    tab_caption("Mice with an issue in their number of rewarded visits.")
```

# Analysis

## Risk type

```{r}
#| label: Risk Preference and Visit Type
#| fig-width: 12

RiskYMax <- UniqueVisits %>% 
  group_by(AnimalTag, ExperimentDay, VisitType, Probability) %>% 
  filter(VisitType != "Error!", Fluid == "Sucrose") %>% 
  summarize(UniqueVisitID = n_distinct(Session, VisitID), .groups = "drop") %>%
  select(UniqueVisitID) %>%
  max(.)
 RiskYMax <- plyr::round_any(RiskYMax, 10, f = ceiling)

p1 <- UniqueVisits %>%
  group_by(AnimalTag, ExperimentDay, VisitType, Probability) %>% 
  filter(VisitType != "Error!", Fluid == "Sucrose") %>% 
  summarize(visits = n_distinct(Session, VisitID),
            .groups = "keep") %>% 
      ggplot(aes(x = ExperimentDay, y = visits, fill = VisitType, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "darkgray") +
  geom_point(shape = 21, size = 2, color = "black") +
  scale_fill_manual(values=VisitTypeColors) +
  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  scale_y_continuous(limits = c(0, RiskYMax)) +
  dbGroupColorScale +
  labs(title = "Sucrose",
       y = "Visits/Day") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ VisitType) #This decides what variables are displayed on the axis boxes


p2 <- UniqueVisits %>%
  group_by(AnimalTag, ExperimentDay, VisitType, Probability) %>% 
  filter(VisitType != "Error!", Fluid == "Water") %>% 
  summarize(visits = n_distinct(Session, VisitID),
            .groups = "keep") %>% 
      ggplot(aes(x = ExperimentDay, y = visits, fill = VisitType, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "darkgray") +
  geom_point(shape = 21, size = 2, color = "black") +
  scale_fill_manual(values=VisitTypeColors) + 
  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  scale_y_continuous(limits = c(0, RiskYMax)) +
  dbGroupColorScale +
  labs(title = "Water",
       y = "Visits/Day") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ VisitType) #This decides what variables are displayed on the axis boxes


p1 + p2 +
  plot_annotation(#tag_levels = "i", 
                  title = "Risk Preference and Visit Type")

ggsave(here("figures", "preference-risktype.pdf"), width = 12, height = 6)
```

## Visits to Risky and Safe corners

```{r}
UniqueVisits %>%
  
  group_by(AnimalTag, ExperimentDay, Probability, Fluid) %>% 
  
  filter(VisitType != "Error!") %>% 
  
  summarize(visits = n_distinct(Session, VisitID),
            .groups = "keep") %>% 
  
      ggplot(aes(x = ExperimentDay, y = visits, fill = Fluid, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "darkgray") +
  geom_point(shape = 21, size = 2, color = "black") +
  geom_vline(xintercept = c(6.5, 10.5, 14.5, 20.5), color = "gray", linetype = "dashed") +

  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  dbGroupColorScale +
  labs(title = "Visits Per Day of Each Solution",
       y = "Visits/Day", caption = "Dashed lines indicate days the probability of getting a reward in each corner changed") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ Fluid) #This decides what variables are displayed on the axis boxes

```

## Intake in risky and safe corners 

```{r}
#| label: Licks Per Day Per Solution, Risky/Safe
UniqueVisits %>%
  
  group_by(AnimalTag, ExperimentDay, Probability, Fluid) %>% 
  
  filter(AnimalTag != "992000001819774") %>% 
  
  summarize(visits = n_distinct(Session, VisitID),
            licks = sum(LickNumber, na.rm = TRUE),
            .groups = "keep") %>% 
  
      ggplot(aes(x = ExperimentDay, y = licks, fill = Fluid, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "darkgray") +
  geom_point(shape = 21, size = 2, color = "black") +
  geom_vline(xintercept = c(6.5, 10.5, 14.5, 20.5), color = "gray", linetype = "dashed") +
  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  dbGroupColorScale +
  labs(title = "Licks Per Day of Each Solution",
       y = "Licks/Day", caption = "Dashed lines indicate days the probability of getting a reward in each corner changed") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ Fluid) #This decides what variables are displayed on the axis boxes
```

## Visit Types per genotype

```{r}
# licks per day on y, experiment day on x, stacked bar plots, sucrose top, water bottom,  added together they are the sum of licks per day. 
#Make graph for each mouse. Facet_grid for mice (ncols and nrows) Use light blue for water, red or something for sucrose.
#Mouse #992000001823391 drinks a lot
GroupColorsPalette = c("#878787", "blue", "#fa4e3e", "#a152fa")
UniqueVisits %>%
  group_by(AnimalTag, ExperimentDay, Probability, Group) %>% 
  
  filter(VisitType != "Error!", Fluid == "Sucrose") %>% 
  
  summarize(visits = n_distinct(Session, VisitID),
            licks = sum(LickNumber),
            .groups = "keep") %>% 
  ggplot(aes(x = ExperimentDay, y = visits, fill = Group, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_vline(xintercept = c(6.5, 10.5, 14.5, 20.5), color = "gray", linetype = "dashed") +
  geom_line(aes(group = AnimalTag), color = "darkgray") +
  geom_point(shape = 21, size = 2, color = "black") +
  scale_fill_manual(values = GroupColorsPalette) + 
  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  dbGroupColorScale +
  labs(title = "Visits Per Day of Each Mouse Group",
       y = "Visits/Day", caption = "Dashed lines indicate days the probability of getting a reward in each corner changed") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ Group) #This decides what variables are displayed on the axis boxes


```
## Group visits per genotype

```{r}
visitsc3 %>%
  distinct(Session, VisitID, .keep_all = T) %>% #All sucrose, Animal, per day,
  filter(VisitType != "Error!" & Fluid == "Sucrose")  %>%
  group_by(AnimalTag, ExperimentDay, Group) %>%
  summarize(sVisits = n(), .groups = "drop") %>%
  group_by(ExperimentDay, Group) %>%
  summarize(groupAvgVisits = mean(sVisits, na.rm = T),
            SampleSize = n(),
            groupSDVisits = sd(sVisits),
            groupSEMVisits = groupSDVisits/sqrt(sVisits),
            .groups = "keep"
            ) %>%

      ggplot(aes(x = ExperimentDay, y = groupAvgVisits, fill = Group, group = Group)) + #This sets up the x and y axis variables
  geom_line(color = "darkgray", linewidth = 1) +
      scale_fill_manual(values = GroupColorsPalette) +
      scale_color_manual(values = GroupColorsPalette) +
      geom_errorbar(aes(
    ymin=groupAvgVisits-groupSEMVisits,
    ymax=groupAvgVisits+groupSEMVisits, color = Group),
    width=.3) +
  geom_point(shape = 21, size = 3, color = "black") +
  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  labs(title = "Sucrose Visits Per Day",
       y = "Visits/Day") +
  theme_minimal() + #Setting theme
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid( ~ Group) #This decides what variables are displayed on the axis boxes


```
## Net VisitTypes per Group
```{r}
#| fig-width: 12
#| fig-height: 8
#
#Note: Most of this code is copy-pasted from above
#
visitsMax <- UniqueVisits %>% 
  group_by(AnimalTag, ExperimentDay, VisitType, Probability) %>% 
  filter(VisitType != "Error!", Fluid == "Sucrose") %>% 
  summarize(UniqueVisitID = n_distinct(Session, VisitID), .groups = "drop") %>%
  select(UniqueVisitID) %>%
  max(.)
 visitsMax <- plyr::round_any(visitsMax, 10, f = ceiling)

control <- UniqueVisits %>%
  group_by(AnimalTag, ExperimentDay, VisitType, Probability) %>% 
  filter(VisitType != "Error!", Fluid == "Sucrose", Group == "control") %>% 
  summarize(UniqueVisitID = n_distinct(Session, VisitID),
            .groups = "keep") %>% 
      ggplot(aes(x = ExperimentDay, y = UniqueVisitID, fill = VisitType, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "#616161") +
  geom_point(shape = 21, size = 2, color = "black") +
  scale_fill_manual(values=VisitTypeColors) +
  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
  scale_y_continuous(limits = c(0, visitsMax)) +
  dbGroupColorScale +
  labs(title = "Control",
       y = "Visits/Day") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ VisitType) #This decides what variables are displayed on the axis boxes




auto <-UniqueVisits %>%
  group_by(AnimalTag, ExperimentDay, VisitType, Probability) %>% 
  filter(VisitType != "Error!", Fluid == "Sucrose", Group == "auto HET") %>% 
  summarize(UniqueVisitID = n_distinct(Session, VisitID),
            .groups = "keep") %>% 
      ggplot(aes(x = ExperimentDay, y = UniqueVisitID, fill = VisitType, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "#616161") +
  geom_point(shape = 21, size = 2, color = "black") +
  scale_fill_manual(values=VisitTypeColors) +
  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
    scale_y_continuous(limits = c(0, visitsMax)) +
  dbGroupColorScale +
  labs(title = "Auto HET",
       y = "Visits/Day") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ VisitType) #This decides what variables are displayed on the axis boxes

imsn <- UniqueVisits %>%
  group_by(AnimalTag, ExperimentDay, VisitType, Probability) %>% 
  filter(VisitType != "Error!", Fluid == "Sucrose", Group == "iMSN HET") %>% 
  summarize(UniqueVisitID = n_distinct(Session, VisitID),
            .groups = "keep") %>% 
      ggplot(aes(x = ExperimentDay, y = UniqueVisitID, fill = VisitType, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "#616161") +
  geom_point(shape = 21, size = 2, color = "black") +
  scale_fill_manual(values=VisitTypeColors) +
  scale_x_continuous(name = "Experiment Day",
                     limits = c(0, 25)) +
    scale_y_continuous(limits = c(0, visitsMax)) +
  dbGroupColorScale +
  labs(title = "IMSN HET",
       y = "Visits/Day") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ VisitType) #This decides what variables are displayed on the axis boxes

double <- UniqueVisits %>%
  group_by(AnimalTag, ExperimentDay, VisitType, Probability) %>% 
  filter(VisitType != "Error!", Fluid == "Sucrose", Group == "double HET") %>% 
  summarize(UniqueVisitID = n_distinct(Session, VisitID),
            .groups = "keep") %>% 
      ggplot(aes(x = ExperimentDay, y = UniqueVisitID, fill = VisitType, group = AnimalTag)) + #This sets up the x and y axis variables
  geom_line(aes(group = AnimalTag), color = "#616161") +
  geom_point(shape = 21, size = 2, color = "black") +
  scale_fill_manual(values=VisitTypeColors) +
  scale_x_continuous(name = "Experiment Day", limits = c(0, 25)) +
  scale_y_continuous(limits = c(0,visitsMax)) +
  dbGroupColorScale +
  labs(title = "Double HET",
       y = "Visits/Day") +
  theme_minimal() + #Setting theme
  guides(color = "none", fill = "none") +
  theme(panel.spacing = unit(1, "lines"),
        strip.background = element_rect(color = "darkgray"), #Decides the color for the outline of boxes
        strip.text = element_text(face = "italic", color = "darkgray")) + #Decides the text color in the white boxes on axes
  facet_grid(Probability ~ VisitType) #This decides what variables are displayed on the axis boxes

GroupVisitTypes <- control + auto + imsn + double
GroupVisitTypes
ggsave(here("Figures", "Group-VisitType.pdf"), width = 12, height = 8)
```

##Consumption of water-sucrose over time per mouse
```{r}
#| fig-width: 18
#| fig-length: 32
colorScale = c("#ff8575", "#457dff")
liquidMax <- max(UniqueVisits %>%
  # max(filter(VisitType != "Error!") %>%
  group_by(AnimalTag, ExperimentDay) %>%
  summarize(Licks = sum(LickNumber), .groups = "drop") %>% 
  select(Licks))
 liquidMax <- plyr::round_any(liquidMax, 1000, f = ceiling)

UniqueVisits %>%
  mutate(AnimalName = str_sub(AnimalTag,-5,-1)) %>%
  group_by(AnimalName, ExperimentDay, Fluid, Group) %>%
  filter(AnimalName != "19774") %>%
  summarize(licks = LickNumber) %>%
  ggplot(aes(fill = Fluid, y = licks, x = ExperimentDay)) +
    geom_bar(position = "stack", stat = "identity") +
  theme_minimal() +
  scale_fill_manual(values = colorScale) +
  scale_x_continuous(limits = c(0,26)) +
  scale_y_continuous(limits = c(0,liquidMax)) +
  labs(x = "Experiment Day", y = "Licks/day") +
  facet_wrap(vars(AnimalName), ncol = 4, scales = "free", labeller = labeller(AnimalTag = str(UniqueVisits$AnimalName + UniqueVisits$Group)))
```

```{r}
UniqueVisits %>% 
  group_by(AnimalTag) %>% 
  summarize(VisitDays = n_distinct(ExperimentDay)) %>% 
  gt()
```

# Creating a cleaned data table
```{r}
cleanData <- UniqueVisits %>% 
  group_by(AnimalTag, ExperimentDay, VisitType, Probability, Fluid, Sex, Group) %>% 
  filter(VisitType != "Error!") %>% 
  summarize(
    Choices = n_distinct(Session, VisitID),
    Licks = sum(LickNumber),
    .groups = "keep",
  ) %>% 
  relocate(c(Sex, Group), .after = AnimalTag) %>% 
  rename(Day = "ExperimentDay")

write_xlsx(cleanData, path = here("data/clean", "CleanedData.xlsx"))
saveRDS(cleanData, here("data/clean","CleanedData.RDS"))

# show percentage of each visit type to total visits for a mouse
# Link to groups and visit types
# percentage of visits between safe and risky only for sucrose

UniqueVisits %>% 
  group_by(ExperimentDay, AnimalTag) %>% 
  filter(VisitType != "Error!", Fluid == "Sucrose") %>% 
  summarize(UniqueVisitID = n_distinct(Session, VisitID), .groups = "drop") %>% 
  mutate(Visits = UniqueVisitID)

#Analysis for sucrose only
cleanDataSucrose <- cleanData %>% 
  filter(Fluid == "Sucrose") 

tempVar <- cleanDataSucrose %>% 
  group_by(AnimalTag, Day) %>% 
  summarize(Visits = sum(Choices), .groups = "drop") 
cleanDataSucrose <- left_join(cleanDataSucrose, tempVar, by=c("AnimalTag", "Day"))

  cleanDataSucrose <- cleanDataSucrose %>% 
  group_by(AnimalTag, Day, Probability) %>%
  mutate(ChoiceFreq = Choices/Visits*100)
  
cleanDataSucroseTemp <- cleanDataSucrose %>%
  group_by(AnimalTag, Day, Probability) %>%
  summarize(RiskChoices = sum(Choices))
cleanDataSucrose <- left_join(cleanDataSucrose, cleanDataSucroseTemp, c("AnimalTag", "Day", "Probability")) %>% 
mutate(RiskPreference = RiskChoices/Visits*100)

t1 <- cleanDataSucrose %>% 
  group_by(AnimalTag, Day, VisitType) %>% 
  summarize(VisitTypeVisits = sum(Choices), .groups = "keep") 
cleanDataSucrose <- left_join(cleanDataSucrose, t1)
```


```{r}


#Analysis for all data
coolStuff <- cleanData %>% 
  group_by(AnimalTag, Day) %>% 
  summarize(Visits = sum(Choices), .groups = "drop") 
cleanData <- left_join(cleanData, coolStuff, by=c("AnimalTag", "Day"))
cleanData <- cleanData %>% 
  mutate(ChoiceFrequency = Choices/Visits*100)

  VTFluidProb <- cleanData %>% #Setting percentage of probability choices
     group_by(AnimalTag, Day, Probability, Fluid, VisitType, Visits) %>% 
    mutate(PFChoices = sum(Choices)) %>% 
  group_by(AnimalTag, Day, Probability, Fluid) %>% 
    mutate(sampleSize = sum(Choices)) %>% 
  mutate(PFPreference = PFChoices/sampleSize) 
  cleanData <- left_join(cleanData, VTFluidProb, c("AnimalTag", "Day", "Probability", "Fluid", "VisitType", "Visits"))



```


##Displaying percent visits for mice
```{r}
#| fig-width: 64
#| fig-height: 32


s1 <- cleanData %>%
  group_by(Day, AnimalTag) %>%
  filter(Fluid == "Water") %>% 
  ggplot(aes(x = Day, y = ChoiceFrequency, color = AnimalTag)) +
  geom_point(size = 5) +
  geom_line() +
  # scale_y_continuous(limits = c(0,1)) +
  scale_x_continuous(limits = c(0,25)) +
facet_grid(VisitType ~ Probability)

w1 <- cleanData %>%
  group_by(Day, AnimalTag) %>%
  filter(Fluid == "Sucrose") %>% 
  ggplot(aes(x = Day, y = ChoiceFrequency, color = AnimalTag)) +
  geom_point(size = 5) +
  geom_line() +
  # scale_y_continuous(limits = c(0,1)) +
facet_grid(VisitType ~ Probability)

# thingy <- s1+w1 
# thingy
# ggsave(here("Figures", "Chart.pdf"), width = 16, height = 32)
```


```{r}
cleanData %>% #Get visits per mouse per type,
  group_by(Day, VisitType, Fluid, Probability) %>%
  summarize(a = sum(VTPreference)/n_distinct(AnimalTag),
            .groups = "keep") %>%
  gt()
```
###Part 0
```{r}
# cleanData %>% #Get visits per mouse per type,
#   group_by(VisitType, Day, Fluid, Probability) %>%
#   summarize(yVal = sum(PFPreference)/n_distinct(AnimalTag),
#             .groups = "keep") %>%
#   ggplot(aes(x = Day, y = yVal, group = VisitType, fill = VisitType) ) +
#   geom_line(aes(group = VisitType), color = "grey") +
#   geom_point(shape = 21, size = 2, color = "black") +
#   scale_x_continuous(limits = c(0,25)) +
#   scale_y_continuous(limits = c(0,1)) +
#   ylab("Percent of Visits") +
#   scale_fill_manual(values = VisitTypeColors) +
#   theme_minimal() +
#   facet_grid(Probability ~ Fluid)

cleanData %>% #Get visits per mouse per type,
  group_by(AnimalTag, VisitType, Day, Fluid, Probability) %>%
  summarize(yVal = sum(PFPreference),
            .groups = "keep") %>%
  ggplot(aes(x = Day, y = yVal, group = VisitType, fill = VisitType) ) +
  geom_line(aes(group = AnimalTag), color = "grey") +
  geom_point(shape = 21, size = 1, color = "black") +
  scale_x_continuous(limits = c(0,25)) +
  scale_y_continuous(limits = c(0,1)) +
  ylab("Percent of Visits") +
  scale_fill_manual(values = VisitTypeColors) +
  theme_minimal() +
  facet_grid(Probability ~ Fluid)
```
###Part 0.1
```{r}
#| fig-width: 16

cleanDataSucrose %>% #Get visits per mouse per type,
  group_by(AnimalTag, Day, VisitType, Visits, VisitTypeVisits) %>%
  # filter(AnimalTag == "992000001819272") %>% %>% 
  summarize(AnimalVisits = sum(Choices), .groups = "drop") %>%
  ggplot(aes(x = Day, y = (VisitTypeVisits/Visits), fill = VisitType)) +
  geom_bar(position = "stack", stat="identity") +
  scale_x_continuous(limits = c(0,26)) +
  scale_y_continuous(limits = c(0,1)) +
  ylab("Percent of visits") +
  scale_fill_manual(values = VisitTypeColors) +
  facet_wrap(vars(AnimalTag), ncol = 4, scales = "free")

```
###Part 1
```{r}
#Part A and B
UniqueVisits %>% 
  group_by(AnimalTag, ExperimentDay, Corner, Group) %>% 
  summarize(Visits = n(),
            RewardedVisits = sum(VisitType == "Rewarded"),
            UnwantedVisits = sum(VisitType == "Unwanted"),
            RewardedRatio = RewardedVisits/Visits,
            UnwantedRatio = UnwantedVisits/Visits,
            .groups = "keep") %>% 
  ggplot(aes(x = ExperimentDay, y = RewardedRatio, fill = Group, color = Group, group = Group)) +
  geom_line(aes(group = Group), color = "grey")+
  geom_point()+
  scale_fill_manual(values = GroupColorsPalette)
  # gt() %>% 
  #   tab_header(title = "Mouse Visits to Each Corner and Visit Types Per Day", subtitle = "Corners 1 & 3 are sucrose, corners 2 & 4 are water")
```
###Part 2
```{r}
#Part A
#Sucrose risky vs safe visits
UniqueVisits %>%
  # summarize(SampleSize = n()) %>% 
  group_by(ExperimentDay, Group) %>% 
  filter(Fluid == "Sucrose") %>% 
  summarize(RiskyVisits = sum(Probability == "Risky"),
            SafeVisits = sum(Probability == "Safe"),
            RiskyProb = RiskyVisits/(RiskyVisits+SafeVisits),
            SafeProb = SafeVisits/(RiskyVisits+SafeVisits),
            # SDVisits = sd(),
            # SEMVisits = SDVisits/sqrt(SDVisits)
            )%>% 
  ggplot(aes(x = ExperimentDay, y = RiskyProb, color = Group, fill = Group)) +
  geom_line(color = "grey")+
  geom_point() +
  theme_minimal() +
  # geom_errorbar(aes(
  #   ymin=RiskyProb-SEMVisits,
  #   ymax=RiskyProb+SEMVisits, color = Group),
  #   width=.3) +
  scale_color_manual(values = GroupColorsPalette) +
  scale_y_continuous(limits = c(0,1)) +
  scale_x_continuous(limits = c(1,25))
```

###Part 3
```{r}
#Part A
UniqueVisits %>% 
  group_by(ExperimentDay) %>% #Comment this line if you want stats for entire experiment instead of by day
  summarize(SucroseVisits = sum(Fluid == "Sucrose"),
            WaterVisits = sum(Fluid == "Water"),
            SucroseRatio = SucroseVisits/n(),
            WaterRatio = WaterVisits/n()) %>% 
  gt() %>% 
  tab_header(title = "Visits to Sucrose and Water Corners")

#Part B
UniqueVisits %>% 
  filter(Probability == "Risky") %>% 
  summarize(SucroseWaterComp = sum(Fluid == "Sucrose")/sum(Fluid == "Water"))
```

###Part 4
```{r}
#Part A
UniqueVisits %>% 
  group_by(ExperimentDay) %>% #Comment this line to see cumulative visits
  summarize(UnwantedSucrose = sum(VisitType == "Unwanted" & Fluid == "Sucrose"),
            WaterVisits = sum(VisitType == "Unwanted" & Fluid == "Water"))
```




